{
  "version": 3,
  "sources": ["../src/exceptions.js", "../src/registration.js", "../src/attendance.js", "../src/exam.js", "../src/utils.js", "../src/encryption.js", "../src/wrapper.js"],
  "sourcesContent": ["/**\n * @module Exceptions\n */\n/**\n * Error classes for handling various API and session-related exceptions\n * @class APIError\n * @extends {Error} Base JavaScript Error class\n * @param {string} message - Error message describing what went wrong\n * @description Base class for API-related errors. Thrown when there is a general API error that doesn't fit other categories.\n */\nexport class APIError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class LoginError\n * @extends {APIError} Base API error class\n * @param {string} message - Error message describing what went wrong\n * @description Error thrown during login attempts. Indicates authentication failed, invalid credentials, or other login-specific issues.\n */\nexport class LoginError extends APIError {\n  constructor(message) {\n    super(message);\n    this.name = 'LoginError';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class SessionError\n * @extends {Error} Base JavaScript Error class\n * @param {string} message - Error message describing what went wrong\n * @description Base class for session-related errors. Handles issues with user sessions and authentication state.\n */\nexport class SessionError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'SessionError';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class SessionExpired\n * @extends {SessionError} Base session error class\n * @param {string} message - Error message describing what went wrong\n * @description Error thrown when the user's session has expired. Indicates the user needs to log in again to refresh their session.\n */\nexport class SessionExpired extends SessionError {\n  constructor(message) {\n    super(message);\n    this.name = 'SessionExpired';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class NotLoggedIn\n * @extends {SessionError} Base session error class\n * @param {string} message - Error message describing what went wrong\n * @description Error thrown when attempting authenticated operations without being logged in. Indicates the user needs to log in before accessing protected resources.\n */\nexport class NotLoggedIn extends SessionError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotLoggedIn';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class AccountAPIError\n * @extends {Error} Base JavaScript Error class\n * @param {string} message - Error message describing what went wrong\n * @description Error thrown during account management operations. Handles errors related to account actions like password changes.\n */\nexport class AccountAPIError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'AccountAPIError';\n  }\n}\n", "/**\n * @module Registration\n */\nexport class RegisteredSubject {\n  /**\n   * Class containing registered subject info like Lecturer name, credits, etc\n   * @param {string} employee_name - Name of the employee/lecturer\n   * @param {string} employee_code - Code of the employee\n   * @param {string} minor_subject - Minor subject information\n   * @param {string} remarks - Any remarks\n   * @param {string} stytype - Style type\n   * @param {number} credits - Number of credits\n   * @param {string} subject_code - Code of the subject\n   * @param {string} subject_component_code - Component code of the subject\n   * @param {string} subject_desc - Description of the subject\n   * @param {string} subject_id - ID of the subject\n   * @param {string} audtsubject - Audit subject information\n   */\n  constructor(\n    employee_name,\n    employee_code,\n    minor_subject,\n    remarks,\n    stytype,\n    credits,\n    subject_code,\n    subject_component_code,\n    subject_desc,\n    subject_id,\n    audtsubject\n  ) {\n    this.employee_name = employee_name;\n    this.employee_code = employee_code;\n    this.minor_subject = minor_subject;\n    this.remarks = remarks;\n    this.stytype = stytype;\n    this.credits = credits;\n    this.subject_code = subject_code;\n    this.subject_component_code = subject_component_code;\n    this.subject_desc = subject_desc;\n    this.subject_id = subject_id;\n    this.audtsubject = audtsubject;\n  }\n\n  /**\n   * Static method to create a RegisteredSubject from a JSON object\n   * @param {object} resp - JSON object representing RegisteredSubject\n   * @returns {RegisteredSubject} A new RegisteredSubject instance\n   */\n  static from_json(resp) {\n    return new RegisteredSubject(\n      resp[\"employeename\"],\n      resp[\"employeecode\"],\n      resp[\"minorsubject\"],\n      resp[\"remarks\"],\n      resp[\"stytype\"],\n      resp[\"credits\"],\n      resp[\"subjectcode\"],\n      resp[\"subjectcomponentcode\"],\n      resp[\"subjectdesc\"],\n      resp[\"subjectid\"],\n      resp[\"audtsubject\"]\n    );\n  }\n}\n\nexport class Registrations {\n  /**\n   * Class containing all registered subjects and total course credits for the semester\n   * @param {object} resp - JSON response object with registrations and total credits\n   */\n  constructor(resp) {\n    this.raw_response = resp;\n    this.total_credits = resp[\"totalcreditpoints\"];\n    this.subjects = resp[\"registrations\"].map(RegisteredSubject.from_json);\n  }\n}\n", "/**\n * @module Attendance\n */\nexport class AttendanceHeader {\n  /**\n   * Class which contains header info in the Attendance API\n   * @param {string} branchdesc - Description of the branch\n   * @param {string} name - Name of the student or entity\n   * @param {string} programdesc - Description of the program\n   * @param {string} stynumber - Style number or identifier\n   */\n  constructor(branchdesc, name, programdesc, stynumber) {\n    this.branchdesc = branchdesc;\n    this.name = name;\n    this.programdesc = programdesc;\n    this.stynumber = stynumber;\n  }\n\n  /**\n   * Static method to create an AttendanceHeader from a JSON object\n   * @param {object} resp - JSON object representing AttendanceHeader\n   * @returns {AttendanceHeader} A new AttendanceHeader instance\n   */\n  static from_json(resp) {\n    return new AttendanceHeader(resp.branchdesc, resp.name, resp.programdesc, resp.stynumber);\n  }\n}\n\nexport class Semester {\n  /**\n   * Class which contains Semester info\n   * @param {string} registration_code - Registration code of the semester\n   * @param {string} registration_id - Registration ID of the semester\n   */\n  constructor(registration_code, registration_id) {\n    this.registration_code = registration_code;\n    this.registration_id = registration_id;\n  }\n\n  /**\n   * Static method to create a Semester from a JSON object\n   * @param {object} resp - JSON object representing Semester\n   * @returns {Semester} A new Semester instance\n   */\n  static from_json(resp) {\n    return new Semester(resp.registrationcode, resp.registrationid);\n  }\n}\n\nexport class AttendanceMeta {\n  /**\n   * Class which contains metadata for Attendance\n   * @param {object} resp - JSON response object with headers and semesters\n   */\n  constructor(resp) {\n    this.raw_response = resp;\n    this.headers = resp.headerlist.map(AttendanceHeader.from_json);\n    this.semesters = resp.semlist.map(Semester.from_json);\n  }\n\n  /**\n   * Returns the latest AttendanceHeader\n   * @returns {AttendanceHeader} The first header in the list\n   */\n  latest_header() {\n    return this.headers[0];\n  }\n\n  /**\n   * Returns the latest Semester\n   * @returns {Semester} The first semester in the list\n   */\n  latest_semester() {\n    return this.semesters[0];\n  }\n}", "/**\n * @module Exams\n */\nexport class ExamEvent {\n  /**\n   * Class containing exam event info\n   * @param {string} exam_event_code - Code of the exam event\n   * @param {number} event_from - Event from timestamp\n   * @param {string} exam_event_desc - Description of the exam event\n   * @param {string} registration_id - Registration ID\n   * @param {string} exam_event_id - Exam event ID\n   */\n  constructor(exam_event_code, event_from, exam_event_desc, registration_id, exam_event_id) {\n    this.exam_event_code = exam_event_code;\n    this.event_from = event_from;\n    this.exam_event_desc = exam_event_desc;\n    this.registration_id = registration_id;\n    this.exam_event_id = exam_event_id;\n  }\n\n  /**\n   * Static method to create an ExamEvent from a JSON object\n   * @param {object} resp - JSON object representing ExamEvent\n   * @returns {ExamEvent} A new ExamEvent instance\n   */\n  static from_json(resp) {\n    return new ExamEvent(\n      resp[\"exameventcode\"],\n      resp[\"eventfrom\"],\n      resp[\"exameventdesc\"],\n      resp[\"registrationid\"],\n      resp[\"exameventid\"]\n    );\n  }\n}\n", "/**\n * @module Utils\n */\n/**\n * Generates a date sequence string from a given date or current date\n * The sequence format is: d[0]m[0]y[0]w[0]d[1]m[1]y[1] where:\n * d = day padded to 2 digits\n * m = month padded to 2 digits\n * y = last 2 digits of year\n * w = weekday number (0-6)\n * @param {Date} [date=null] - Date object to generate sequence from. If null, uses current date\n * @returns {string} The generated date sequence string\n */\nexport function generate_date_seq(date = null) {\n  if (date === null) {\n    date = new Date();\n  }\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Months are 0-indexed in JS\n  const year = String(date.getFullYear()).slice(2);\n  const weekday = String(date.getDay());\n\n  return day[0] + month[0] + year[0] + weekday + day[1] + month[1] + year[1];\n}\n\n/**\n * Generates a random string of specified length using alphanumeric characters\n * @param {number} n - Length of random string to generate\n * @returns {string} Random string of length n containing alphanumeric characters\n */\nexport function get_random_char_seq(n) {\n  const charset = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let result = \"\";\n\n  for (let i = 0; i < n; i++) {\n    const randomIndex = Math.floor(Math.random() * charset.length);\n    result += charset[randomIndex];\n  }\n\n  return result;\n}\n", "import { generate_date_seq, get_random_char_seq } from \"./utils.js\";\n\n/**\n * @module Encryption\n */\n/**\n * Encodes binary data to base64 string\n * @param {Uint8Array} data - Binary data to encode\n * @returns {string} Base64 encoded string\n */\nexport function base64Encode(data) {\n  return btoa(String.fromCharCode.apply(null, new Uint8Array(data)));\n}\n\n/**\n * Decodes base64 string to binary data\n * @param {string} data - Base64 string to decode\n * @returns {Uint8Array} Decoded binary data\n */\nexport function base64Decode(data) {\n  return Uint8Array.from(atob(data), (c) => c.charCodeAt(0));\n}\n\n// Initialization Vector (IV)\nconst IV = new TextEncoder().encode(\"dcek9wb8frty1pnm\");\n\n/**\n * Generates an AES key based on date sequence\n * @param {Date} [date=null] - Optional date to use for key generation\n * @returns {Promise<CryptoKey>} Generated AES-CBC key\n */\nexport async function generate_key(date = null) {\n  const dateSeq = generate_date_seq(date);\n  const keyData = new TextEncoder().encode(\"qa8y\" + dateSeq + \"ty1pn\");\n  return window.crypto.subtle.importKey(\"raw\", keyData, { name: \"AES-CBC\" }, false, [\"encrypt\", \"decrypt\"]);\n}\n\n/**\n * Generates an encrypted local name for request headers\n * @param {Date} [date=null] - Optional date to use for name generation\n * @returns {Promise<string>} Base64 encoded encrypted local name\n */\nexport async function generate_local_name(date = null) {\n  const randomCharSeq = get_random_char_seq(4);\n  const dateSeq = generate_date_seq(date);\n  const randomSuffix = get_random_char_seq(5);\n  const nameBytes = new TextEncoder().encode(randomCharSeq + dateSeq + randomSuffix);\n  const encryptedBytes = await encrypt(nameBytes);\n\n  return base64Encode(encryptedBytes);\n}\n\n/**\n * Encrypts data using AES-CBC\n * @param {Uint8Array} data - Data to encrypt\n * @returns {Promise<Uint8Array>} Encrypted data\n */\nexport async function encrypt(data) {\n  const key = await generate_key();\n  const encrypted = await window.crypto.subtle.encrypt({ name: \"AES-CBC\", iv: IV }, key, data);\n  return new Uint8Array(encrypted);\n}\n\n/**\n * Decrypts data using AES-CBC\n * @param {Uint8Array} data - Data to decrypt\n * @returns {Promise<Uint8Array>} Decrypted data\n */\nexport async function decrypt(data) {\n  const key = await generate_key();\n  const decrypted = await window.crypto.subtle.decrypt({ name: \"AES-CBC\", iv: IV }, key, data);\n  return new Uint8Array(decrypted);\n}\n\n/**\n * Deserializes an encrypted base64 payload\n * @param {string} payload - Base64 encoded encrypted payload\n * @returns {Promise<object>} Decrypted and parsed JSON object\n */\nexport async function deserialize_payload(payload) {\n  const pbytes = base64Decode(payload);\n  const raw = await decrypt(pbytes);\n  return JSON.parse(new TextDecoder().decode(raw));\n}\n\n/**\n * Serializes and encrypts a payload object\n * @param {object} payload - Object to serialize and encrypt\n * @returns {Promise<string>} Base64 encoded encrypted payload\n */\nexport async function serialize_payload(payload) {\n  const raw = new TextEncoder().encode(JSON.stringify(payload));\n  const pbytes = await encrypt(raw);\n  return base64Encode(pbytes);\n}\n", "import { NotLoggedIn, SessionExpired, SessionError, AccountAPIError, LoginError, APIError } from \"./exceptions.js\";\nimport { RegisteredSubject, Registrations } from \"./registration.js\";\nimport { AttendanceMeta, AttendanceHeader, Semester } from \"./attendance.js\";\nimport { ExamEvent } from \"./exam.js\";\nimport { generate_local_name, serialize_payload } from \"./encryption.js\";\n\n/**\n * @module Wrapper\n */\n/**\n * Base API endpoint for the JIIT web portal\n * @constant {string}\n */\nexport const API = \"https://webportal.jiit.ac.in:6011/StudentPortalAPI\";\n\n/**\n * Default CAPTCHA values used for login\n * @constant {{captcha: string, hidden: string}}\n */\nexport const DEFCAPTCHA = { captcha: \"phw5n\", hidden: \"gmBctEffdSg=\" };\n\n/**\n * Class representing a session with the web portal\n */\nexport class WebPortalSession {\n  /**\n   * Creates a WebPortalSession instance from API response\n   * @param {Object} resp - Response object from login API\n   * @param {Object} resp.regdata - Registration data containing user details\n   * @param {Array} resp.regdata.institutelist - List of institutes user has access to\n   * @param {string} resp.regdata.memberid - Member ID of the user\n   * @param {string} resp.regdata.userid - User ID\n   * @param {string} resp.regdata.token - Token for authentication\n   * @param {string} resp.regdata.clientid - Client ID\n   * @param {string} resp.regdata.membertype - Type of member\n   * @param {string} resp.regdata.name - Name of the user\n   * @param {string} resp.regdata.enrollmentno - Enrollment number\n   */\n  constructor(resp) {\n    this.raw_response = resp;\n    this.regdata = resp[\"regdata\"];\n\n    let institute = this.regdata[\"institutelist\"][0];\n    this.institute = institute[\"label\"];\n    this.instituteid = institute[\"value\"];\n    this.memberid = this.regdata[\"memberid\"];\n    this.userid = this.regdata[\"userid\"];\n\n    this.token = this.regdata[\"token\"];\n    let expiry_timestamp = JSON.parse(atob(this.token.split(\".\")[1]))[\"exp\"];\n    this.expiry = new Date(expiry_timestamp * 1000); // In JavaScript, Date expects milliseconds\n\n    this.clientid = this.regdata[\"clientid\"];\n    this.membertype = this.regdata[\"membertype\"];\n    this.name = this.regdata[\"name\"];\n    this.enrollmentno = this.regdata[\"enrollmentno\"];\n  }\n\n  /**\n   * Generates authentication headers for API requests\n   * @returns {Promise<Object>} Headers object containing Authorization and LocalName\n   */\n  async get_headers() {\n    const localname = await generate_local_name();\n    return {\n      Authorization: `Bearer ${this.token}`,\n      LocalName: localname,\n    };\n  }\n}\n\n/**\n * Main class for interacting with the JIIT web portal API\n */\nexport class WebPortal {\n  /**\n   * Creates a WebPortal instance\n   */\n  constructor() {\n    this.session = null;\n  }\n\n  /**\n   * Internal method to make HTTP requests to the API\n   * @private\n   * @param {string} method - HTTP method (GET, POST etc)\n   * @param {string} url - API endpoint URL\n   * @param {Object} [options={}] - Request options\n   * @param {Object} [options.headers] - Additional headers\n   * @param {Object} [options.json] - JSON payload\n   * @param {string} [options.body] - Raw body payload\n   * @param {boolean} [options.authenticated] - Whether request needs authentication\n   * @param {Error} [options.exception] - Custom error class to throw\n   * @returns {Promise<Object>} API response\n   * @throws {APIError} On API or network errors\n   */\n  async __hit(method, url, options = {}) {\n    let exception = APIError; // Default exception\n    if (options.exception) {\n      exception = options.exception;\n      delete options.exception;\n    }\n\n    let header;\n    if (options.authenticated) {\n      header = await this.session.get_headers(); // Assumes calling method is authenticated\n      delete options.authenticated;\n    } else {\n      let localname = await generate_local_name();\n      header = { LocalName: localname };\n    }\n\n    if (options.headers) {\n      options.headers = { ...options.headers, ...header };\n    } else {\n      options.headers = header;\n    }\n\n    let fetchOptions = {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options.headers,\n      },\n    };\n\n    if (options.json) {\n      fetchOptions.body = JSON.stringify(options.json);\n    } else {\n      fetchOptions.body = options.body;\n    }\n\n    try {\n      console.log(\"fetching\", url, \"with options\", fetchOptions);\n      const response = await fetch(url, fetchOptions);\n\n      if (response.status === 513) {\n        throw new exception(\"JIIT Web Portal server is temporarily unavailable (HTTP 513). Please try again later.\");\n      }\n      if (response.status === 401) {\n          throw new SessionExpired(response.error);\n      }\n\n      const resp = await response.json();\n\n      if (resp.status && resp.status.responseStatus !== \"Success\") {\n        throw new exception(`status:\\n${JSON.stringify(resp.status, null, 2)}`);\n      }\n      return resp;\n    } catch (error) {\n      // Handle CORS errors\n      if (error instanceof TypeError && error.message.includes('CORS')) {\n        throw new exception(\"JIIT Web Portal server is temporarily unavailable. Please try again later.\");\n      }\n      throw new exception(error.message || \"Unknown error\");\n    }\n  }\n\n  /**\n   * Logs in a student user\n   * @param {string} username - Student username\n   * @param {string} password - Student password\n   * @param {{captcha: string, hidden: string}} [captcha=DEFCAPTCHA] - CAPTCHA\n   * @returns {Promise<WebPortalSession>} New session instance\n   * @throws {LoginError} On login failure\n   */\n  async student_login(username, password, captcha = DEFCAPTCHA) {\n    let pretoken_endpoint = \"/token/pretoken-check\";\n    let token_endpoint = \"/token/generate-token1\";\n\n    let payload = { username: username, usertype: \"S\", captcha: captcha };\n    payload = await serialize_payload(payload);\n\n    let resp = await this.__hit(\"POST\", API + pretoken_endpoint, { body: payload, exception: LoginError });\n\n    let payload2 = resp[\"response\"];\n    delete payload2[\"rejectedData\"];\n    payload2[\"Modulename\"] = \"STUDENTMODULE\";\n    payload2[\"passwordotpvalue\"] = password;\n    payload2 = await serialize_payload(payload2);\n\n    const resp2 = await this.__hit(\"POST\", API + token_endpoint, { body: payload2, exception: LoginError });\n    this.session = new WebPortalSession(resp2[\"response\"]);\n    return this.session;\n  }\n\n  /**\n   * Gets personal information of logged in student\n   * @returns {Promise<Object>} Student personal information\n   */\n  async get_personal_info() {\n    const ENDPOINT = \"/studentpersinfo/getstudent-personalinformation\";\n    const payload = {\n      clinetid: \"SOAU\",\n      instituteid: this.session.instituteid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets bank account information of logged in student\n   * @returns {Promise<Object>} Student bank information\n   */\n  async get_student_bank_info() {\n    const ENDPOINT = \"/studentbankdetails/getstudentbankinfo\";\n    const payload = {\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Changes password for logged in student\n   * @param {string} old_password - Current password\n   * @param {string} new_password - New password\n   * @returns {Promise<Object>} Response indicating success/failure\n   * @throws {AccountAPIError} On password change failure\n   */\n  async change_password(old_password, new_password) {\n    const ENDPOINT = \"/clxuser/changepassword\";\n    const payload = {\n      membertype: this.session.membertype,\n      oldpassword: old_password,\n      newpassword: new_password,\n      confirmpassword: new_password,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, {\n      json: payload,\n      authenticated: true,\n      exception: AccountAPIError,\n    });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets attendance metadata including headers and semesters\n   * @returns {Promise<AttendanceMeta>} Attendance metadata\n   */\n  async get_attendance_meta() {\n    const ENDPOINT = \"/StudentClassAttendance/getstudentInforegistrationforattendence\";\n\n    const payload = {\n      clientid: this.session.clientid,\n      instituteid: this.session.instituteid,\n      membertype: this.session.membertype,\n    };\n\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return new AttendanceMeta(resp[\"response\"]);\n  }\n\n  /**\n   * Gets attendance details for a semester\n   * @param {AttendanceHeader} header - Attendance header\n   * @param {Semester} semester - Semester object\n   * @returns {Promise<Object>} Attendance details\n   */\n  async get_attendance(header, semester) {\n    const ENDPOINT = \"/StudentClassAttendance/getstudentattendancedetail\";\n\n    const payload = {\n      clientid: this.session.clientid,\n      instituteid: this.session.instituteid,\n      registrationcode: semester.registration_code,\n      registrationid: semester.registration_id,\n      stynumber: header.stynumber,\n    };\n\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets attendance for every class of the subject for the semester.\n   * @param {Semester} semester - Semester object\n   * @param {string} subjectid - Subject ID\n   * @param {string} individualsubjectcode - Individual subject code\n   * @param {Array<string>} subjectcomponentids - Array of subject component IDs\n   * @returns {Promise<Object>} Subject attendance details\n   */\n  async get_subject_daily_attendance(semester, subjectid, individualsubjectcode, subjectcomponentids) {\n    const ENDPOINT = \"/StudentClassAttendance/getstudentsubjectpersentage\";\n    const payload = {\n      cmpidkey: subjectcomponentids.map((id) => ({ subjectcomponentid: id })),\n      clientid: this.session.clientid,\n      instituteid: this.session.instituteid,\n      registrationcode: semester.registration_code,\n      registrationid: semester.registration_id,\n      subjectcode: individualsubjectcode,\n      subjectid: subjectid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets list of registered semesters\n   * @returns {Promise<Array<Semester>>} Array of semester objects\n   */\n  async get_registered_semesters() {\n    const ENDPOINT = \"/reqsubfaculty/getregistrationList\";\n\n    const payload = {\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"registrations\"].map((i) => Semester.from_json(i));\n  }\n\n  /**\n   * Gets registered subjects and faculty details for a semester\n   * @param {Semester} semester - Semester object\n   * @returns {Promise<Registrations>} Registration details\n   */\n  async get_registered_subjects_and_faculties(semester) {\n    const ENDPOINT = \"/reqsubfaculty/getfaculties\";\n    const payload = {\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n      registrationid: semester.registration_id,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return new Registrations(resp[\"response\"]);\n  }\n\n  /**\n   * Gets semesters that have exam events\n   * @returns {Promise<Array<Semester>>} Array of semester objects\n   */\n  async get_semesters_for_exam_events() {\n    const ENDPOINT = \"/studentcommonsontroller/getsemestercode-withstudentexamevents\";\n    const payload = {\n      clientid: this.session.clientid,\n      instituteid: this.session.instituteid,\n      memberid: this.session.memberid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"semesterCodeinfo\"][\"semestercode\"].map((i) => Semester.from_json(i));\n  }\n\n  /**\n   * Gets exam events for a semester\n   * @param {Semester} semester - Semester object\n   * @returns {Promise<Array<ExamEvent>>} Array of exam event objects\n   */\n  async get_exam_events(semester) {\n    const ENDPOINT = \"/studentcommonsontroller/getstudentexamevents\";\n    const payload = {\n      instituteid: this.session.instituteid,\n      registationid: semester.registration_id, // not a typo\n    };\n\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"eventcode\"][\"examevent\"].map((i) => ExamEvent.from_json(i));\n  }\n\n  /**\n   * Gets exam schedule for an exam event\n   * @param {ExamEvent} exam_event - Exam event object\n   * @returns {Promise<Object>} Exam schedule details\n   */\n  async get_exam_schedule(exam_event) {\n    const ENDPOINT = \"/studentsttattview/getstudent-examschedule\";\n    const payload = {\n      instituteid: this.session.instituteid,\n      registrationid: exam_event.registration_id,\n      exameventid: exam_event.exam_event_id,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets semesters that have marks available\n   * @returns {Promise<Array<Semester>>} Array of semester objects\n   */\n  async get_semesters_for_marks() {\n    const ENDPOINT = \"/studentcommonsontroller/getsemestercode-exammarks\";\n    const payload = {\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"semestercode\"].map((i) => Semester.from_json(i));\n  }\n\n  /**\n   * Downloads marks PDF for a semester\n   * @param {Semester} semester - Semester object\n   * @throws {APIError} On download failure\n   */\n  async download_marks(semester) {\n    const ENDPOINT =\n      \"/studentsexamview/printstudent-exammarks/\" +\n      this.session.memberid +\n      \"/\" +\n      this.session.instituteid +\n      \"/\" +\n      semester.registration_id +\n      \"/\" +\n      semester.registration_code;\n    const localname = await generate_local_name();\n    let _headers = await this.session.get_headers(localname);\n    const fetchOptions = {\n      method: \"GET\",\n      headers: _headers,\n    };\n\n    try {\n      const resp = await fetch(API + ENDPOINT, fetchOptions);\n      const blob = await resp.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `marks_${semester.registration_code}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      a.remove();\n    } catch (error) {\n      throw new APIError(error);\n    }\n  }\n\n  /**\n   * Gets semesters that have grade cards available\n   * @returns {Promise<Array<Semester>>} Array of semester objects\n   */\n  async get_semesters_for_grade_card() {\n    const ENDPOINT = \"/studentgradecard/getregistrationList\";\n    const payload = {\n      instituteid: this.session.instituteid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"registrations\"].map((i) => Semester.from_json(i));\n  }\n\n  /**\n   * Gets program ID for grade card\n   * @private\n   * @returns {Promise<string>} Program ID\n   */\n  async __get_program_id() {\n    const ENDPOINT = \"/studentgradecard/getstudentinfo\";\n    const payload = {\n      instituteid: this.session.instituteid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"programid\"];\n  }\n\n  /**\n   * Gets grade card for a semester\n   * @param {Semester} semester - Semester object\n   * @returns {Promise<Object>} Grade card details\n   */\n  async get_grade_card(semester) {\n    const programid = await this.__get_program_id();\n    const ENDPOINT = \"/studentgradecard/showstudentgradecard\";\n    const payload = {\n      branchid: this.session.branch_id,\n      instituteid: this.session.instituteid,\n      programid: programid,\n      registrationid: semester.registration_id,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets current semester number\n   * @private\n   * @returns {Promise<number>} Current semester number\n   */\n  async __get_semester_number() {\n    const ENDPOINT = \"/studentsgpacgpa/checkIfstudentmasterexist\";\n    const payload = {\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n      name: this.session.name,\n      enrollmentno: this.session.enrollmentno,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"studentlov\"][\"currentsemester\"];\n  }\n\n  /**\n   * Gets SGPA and CGPA details\n   * @returns {Promise<Object>} SGPA and CGPA details\n   */\n  async get_sgpa_cgpa() {\n    const ENDPOINT = \"/studentsgpacgpa/getallsemesterdata\";\n    const stynumber = await this.__get_semester_number();\n    const payload = {\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n      stynumber: stynumber,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n}\n\n/**\n * Decorator that checks if user is authenticated before executing method\n * @param {Function} method - Method to decorate\n * @returns {Function} Decorated method that checks authentication\n * @throws {NotLoggedIn} If user is not logged in\n */\nfunction authenticated(method) {\n  return function (...args) {\n    if (this.session == null) {\n      throw new NotLoggedIn();\n    }\n    return method.apply(this, args);\n  };\n}\n\n/**\n * List of methods that require authentication\n * @constant {Array<string>}\n */\nconst authenticatedMethods = [\n  \"get_personal_info\",\n  \"get_student_bank_info\",\n  \"change_password\",\n  \"get_attendance_meta\",\n  \"get_attendance\",\n  \"get_subject_daily_attendance\",\n  \"get_registered_semesters\",\n  \"get_registered_subjects_and_faculties\",\n  \"get_semesters_for_exam_events\",\n  \"get_exam_events\",\n  \"get_exam_schedule\",\n  \"get_semesters_for_marks\",\n  \"download_marks\",\n  \"get_semesters_for_grade_card\",\n  \"__get_program_id\",\n  \"get_grade_card\",\n  \"__get_semester_number\",\n  \"get_sgpa_cgpa\",\n];\n\nauthenticatedMethods.forEach((methodName) => {\n  WebPortal.prototype[methodName] = authenticated(WebPortal.prototype[methodName]);\n});\n"],
  "mappings": "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",
  "names": ["APIError", "message", "LoginError", "SessionError", "SessionExpired", "NotLoggedIn", "AccountAPIError", "RegisteredSubject", "_RegisteredSubject", "employee_name", "employee_code", "minor_subject", "remarks", "stytype", "credits", "subject_code", "subject_component_code", "subject_desc", "subject_id", "audtsubject", "resp", "Registrations", "AttendanceHeader", "_AttendanceHeader", "branchdesc", "name", "programdesc", "stynumber", "resp", "Semester", "_Semester", "registration_code", "registration_id", "AttendanceMeta", "ExamEvent", "_ExamEvent", "exam_event_code", "event_from", "exam_event_desc", "registration_id", "exam_event_id", "resp", "generate_date_seq", "date", "day", "month", "year", "weekday", "get_random_char_seq", "charset", "result", "i", "randomIndex", "base64Encode", "data", "IV", "generate_key", "date", "dateSeq", "generate_date_seq", "keyData", "generate_local_name", "randomCharSeq", "get_random_char_seq", "randomSuffix", "nameBytes", "encryptedBytes", "encrypt", "base64Encode", "data", "key", "encrypted", "serialize_payload", "payload", "raw", "pbytes", "encrypt", "base64Encode", "API", "DEFCAPTCHA", "WebPortalSession", "resp", "institute", "expiry_timestamp", "localname", "generate_local_name", "WebPortal", "method", "url", "options", "exception", "APIError", "header", "fetchOptions", "response", "SessionExpired", "error", "username", "password", "captcha", "pretoken_endpoint", "token_endpoint", "payload", "serialize_payload", "payload2", "LoginError", "resp2", "ENDPOINT", "old_password", "new_password", "AccountAPIError", "AttendanceMeta", "semester", "subjectid", "individualsubjectcode", "subjectcomponentids", "id", "Semester", "Registrations", "i", "ExamEvent", "exam_event", "blob", "a", "programid", "stynumber", "authenticated", "args", "NotLoggedIn", "authenticatedMethods", "methodName"]
}
